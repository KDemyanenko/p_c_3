fn simple_array_sum(ar: &[i32]) -> i32 {
    let mut sum = 0;  
    for i in 0..ar.len() {  sum += ar[i];  }
    sum  
}

fn main() {
    let mut input = String::new();
    std::io::stdin().read_line(&mut input).expect("Помилка при введенні масиву");

    let ar: Vec<i32> = input.trim().split_whitespace()
                        .map(|x| x.parse().expect("Помилка при конвертації елементів масиву")).collect();
    let result = simple_array_sum(&ar);
    println!("{}", result);
}


Спочатку я написав функцію simple_array_sum, яка приймає масив цілих чисел. Я створив змінну sum, щоб зберігати суму елементів масиву, і ініціалізував її нулем.

Далі я використав цикл for, щоб пройти через усі елементи масиву. У кожній ітерації я додавав значення поточного елемента до змінної sum.

Після завершення циклу я повернув отриману суму.

У функції main я спочатку прочитав рядок з введенням, в якому містився масив. Я створив змінну input, куди зберігав дані, і скористався методом read_line, щоб прочитати вхідні дані.

Потім я перетворив цей рядок на масив цілих чисел, розділивши його за пробілами. Кожну частину я перетворив на число з допомогою map і parse. Всі ці значення я зібрав у вектор ar.

На завершення, я викликав функцію simple_array_sum, передаючи їй масив ar, і вивів результат на екран.

Таким чином, я обчислив суму елементів масиву, прочитавши дані з консолі та використавши просту і зрозумілу структуру коду.

