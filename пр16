use std::env;
use std::fs::File;
use std::io::{self, BufRead, Write};

fn divisibleSumPairs(n: i32, k: i32, ar: &[i32]) -> i32 {
    let mut count = 0;
    for i in 0..n {
        for j in i + 1..n {
            if (ar[i as usize] + ar[j as usize]) % k == 0 {
                count += 1;
            }
        }
    }
    count
}

fn main() {
    let stdin = io::stdin();
    let mut stdin_iterator = stdin.lock().lines();

    let mut fptr = File::create(env::var("OUTPUT_PATH").unwrap()).unwrap();

    let first_multiple_input: Vec<String> = stdin_iterator.next().unwrap().unwrap()
        .split(' ')
        .map(|s| s.to_string())
        .collect();

    let n = first_multiple_input[0].trim().parse::<i32>().unwrap();
    let k = first_multiple_input[1].trim().parse::<i32>().unwrap();

    let ar: Vec<i32> = stdin_iterator.next().unwrap().unwrap()
        .trim_end()
        .split(' ')
        .map(|s| s.to_string().parse::<i32>().unwrap())
        .collect();

    let result = divisibleSumPairs(n, k, &ar);

    writeln!(&mut fptr, "{}", result).ok();
}






  Я реалізував функцію divisibleSumPairs, де всередині написав два цикли for, щоб перебрати всі пари з масиву. Я перевіряю, чи сума кожної пари ділиться на k, і якщо так, то збільшую лічильник count.

Це дозволяє мені підрахувати, скільки таких пар існує. Потім у функції main я зчитую вхідні дані, розбиваю їх на частини, і передаю в масив та інші параметри для виклику моєї функції. 

В результаті я виводжу кількість пар, які відповідають критеріям.
