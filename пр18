use std::io::{self, BufRead};

fn bonAppetit(bill: &[i32], k: i32, b: i32) {
    let mut total_cost = 0;
    for (i, &cost) in bill.iter().enumerate() {
        if i != k as usize {
            total_cost += cost;
        }
    }
    let anna_share = total_cost / 2;
    if b == anna_share {
        println!("Bon Appetit");
    } else {
        println!("{}", b - anna_share);
    }
}

fn main() {
    let stdin = io::stdin();
    let mut stdin_iterator = stdin.lock().lines();

    let first_multiple_input: Vec<String> = stdin_iterator.next().unwrap().unwrap()
        .split(' ')
        .map(|s| s.to_string())
        .collect();

    let n = first_multiple_input[0].trim().parse::<i32>().unwrap();
    let k = first_multiple_input[1].trim().parse::<i32>().unwrap();

    let bill: Vec<i32> = stdin_iterator.next().unwrap().unwrap()
        .trim_end()
        .split(' ')
        .map(|s| s.to_string().parse::<i32>().unwrap())
        .collect();

    let b = stdin_iterator.next().unwrap().unwrap().trim().parse::<i32>().unwrap();

    bonAppetit(&bill, k, b);
}




Я реалізував функцію bonAppetit, де підрахував загальну вартість страв, які замовила Анна, пропустивши страву, яку вона не їла. Потім я розділив загальну вартість навпіл, щоб визначити, скільки вона повинна була заплатити. 

Далі, я порівняв цю суму з тим, що заплатила Анна, і якщо вони дорівнюють, вивів "Bon Appetit". Якщо ні, то вивів різницю, яку Браян має повернути Анні.





